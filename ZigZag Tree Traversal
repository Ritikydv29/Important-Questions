//User function Template for C++
/*Structure of the node of the binary tree is as
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution{
    public:
    vector<int> solve(Node* root,vector<int> &ar)
    {
        int index=0;
        bool ltr=true;
        if(root==NULL)
        {
            return ar;
        }
        queue<Node *>q;
        q.push(root);
        Node *temp;
        while(!q.empty())
        {
            
            int size=q.size();
            vector<int>ans(size);
             for(int i=0;i<size;i++)
             {
                temp=q.front();  
                q.pop();
                index=ltr?i:size-i-1;
                ans[index]=temp->data;
               if(temp->left)
               {
                q.push(temp->left);
               }
               if(temp->right)
               {
                q.push(temp->right);
               }
               
             }
             ltr=!ltr;
             for(auto i:ans)
             {
                 ar.push_back(i);
             }
            
        }
        return ar;
    }
    //Function to store the zig zag order traversal of tree in a list.
    vector <int> zigZagTraversal(Node* root)
    {
        vector<int> ar;
    	solve(root,ar);
    	return ar;
    }
};
