/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> s;
        TreeNode *curr=root;
        while(curr!=NULL || s.size()>0)
        {
            while(curr!=NULL)
            {
                s.push(curr);
                curr=curr->left;
            }
            curr=s.top();
            s.pop();
            res.push_back(curr->val);
            curr=curr->right;
        }
        return res;
    }

    TreeNode* increasingBST(TreeNode* root) {
        vector<int>ar =inorderTraversal(root);
        TreeNode *dummy=new TreeNode(0);
        TreeNode* curr;
        curr=dummy;
        for(int i=0;i<ar.size();i++)
        {
             TreeNode *N=new TreeNode(ar[i]);
             curr->right=N;
             curr=N;
        }
        return dummy->right;
    }
};
